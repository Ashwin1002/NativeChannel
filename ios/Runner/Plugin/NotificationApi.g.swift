// Autogenerated from Pigeon (v22.7.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class NotificationApiException: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "NotificationApiException(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? NotificationApiException {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum NotificationPermissionStatus: Int {
  case granted = 0
  case denied = 1
  case notDetermined = 2
}

private class NotificationApiPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return NotificationPermissionStatus(rawValue: enumResultAsInt)
      }
      return nil
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class NotificationApiPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? NotificationPermissionStatus {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else {
      super.writeValue(value)
    }
  }
}

private class NotificationApiPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return NotificationApiPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return NotificationApiPigeonCodecWriter(data: data)
  }
}

class NotificationApiPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = NotificationApiPigeonCodec(readerWriter: NotificationApiPigeonCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol NotificationApi {
  func checkNotificationPermission() throws -> NotificationPermissionStatus
  func requestPermission() throws -> Bool
  func triggerNotification(title: String, message: String) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class NotificationApiSetup {
  static var codec: FlutterStandardMessageCodec { NotificationApiPigeonCodec.shared }
  /// Sets up an instance of `NotificationApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: NotificationApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let checkNotificationPermissionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.native_channel.NotificationApi.checkNotificationPermission\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      checkNotificationPermissionChannel.setMessageHandler { _, reply in
        do {
          let result = try api.checkNotificationPermission()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      checkNotificationPermissionChannel.setMessageHandler(nil)
    }
    let requestPermissionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.native_channel.NotificationApi.requestPermission\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      requestPermissionChannel.setMessageHandler { _, reply in
        do {
          let result = try api.requestPermission()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      requestPermissionChannel.setMessageHandler(nil)
    }
    let triggerNotificationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.native_channel.NotificationApi.triggerNotification\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      triggerNotificationChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let titleArg = args[0] as! String
        let messageArg = args[1] as! String
        do {
          try api.triggerNotification(title: titleArg, message: messageArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      triggerNotificationChannel.setMessageHandler(nil)
    }
  }
}
